// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// create_intervalmap
SEXP create_intervalmap();
RcppExport SEXP _superintervals_create_intervalmap() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(create_intervalmap());
    return rcpp_result_gen;
END_RCPP
}
// add_interval
void add_interval(SEXP container, int start, int end, SEXP value);
RcppExport SEXP _superintervals_add_interval(SEXP containerSEXP, SEXP startSEXP, SEXP endSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type container(containerSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< int >::type end(endSEXP);
    Rcpp::traits::input_parameter< SEXP >::type value(valueSEXP);
    add_interval(container, start, end, value);
    return R_NilValue;
END_RCPP
}
// build_index
void build_index(SEXP container);
RcppExport SEXP _superintervals_build_index(SEXP containerSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type container(containerSEXP);
    build_index(container);
    return R_NilValue;
END_RCPP
}
// get_interval_at
List get_interval_at(SEXP container, int r_index);
RcppExport SEXP _superintervals_get_interval_at(SEXP containerSEXP, SEXP r_indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type container(containerSEXP);
    Rcpp::traits::input_parameter< int >::type r_index(r_indexSEXP);
    rcpp_result_gen = Rcpp::wrap(get_interval_at(container, r_index));
    return rcpp_result_gen;
END_RCPP
}
// get_start_at
int get_start_at(SEXP container, int r_index);
RcppExport SEXP _superintervals_get_start_at(SEXP containerSEXP, SEXP r_indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type container(containerSEXP);
    Rcpp::traits::input_parameter< int >::type r_index(r_indexSEXP);
    rcpp_result_gen = Rcpp::wrap(get_start_at(container, r_index));
    return rcpp_result_gen;
END_RCPP
}
// get_end_at
int get_end_at(SEXP container, int r_index);
RcppExport SEXP _superintervals_get_end_at(SEXP containerSEXP, SEXP r_indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type container(containerSEXP);
    Rcpp::traits::input_parameter< int >::type r_index(r_indexSEXP);
    rcpp_result_gen = Rcpp::wrap(get_end_at(container, r_index));
    return rcpp_result_gen;
END_RCPP
}
// get_data_at
SEXP get_data_at(SEXP container, int r_index);
RcppExport SEXP _superintervals_get_data_at(SEXP containerSEXP, SEXP r_indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type container(containerSEXP);
    Rcpp::traits::input_parameter< int >::type r_index(r_indexSEXP);
    rcpp_result_gen = Rcpp::wrap(get_data_at(container, r_index));
    return rcpp_result_gen;
END_RCPP
}
// clear_intervals
void clear_intervals(SEXP container);
RcppExport SEXP _superintervals_clear_intervals(SEXP containerSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type container(containerSEXP);
    clear_intervals(container);
    return R_NilValue;
END_RCPP
}
// reserve_intervals
void reserve_intervals(SEXP container, int n);
RcppExport SEXP _superintervals_reserve_intervals(SEXP containerSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type container(containerSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    reserve_intervals(container, n);
    return R_NilValue;
END_RCPP
}
// get_size
int get_size(SEXP container);
RcppExport SEXP _superintervals_get_size(SEXP containerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type container(containerSEXP);
    rcpp_result_gen = Rcpp::wrap(get_size(container));
    return rcpp_result_gen;
END_RCPP
}
// cpp_has_overlaps
bool cpp_has_overlaps(SEXP container, int start, int end);
RcppExport SEXP _superintervals_cpp_has_overlaps(SEXP containerSEXP, SEXP startSEXP, SEXP endSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type container(containerSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< int >::type end(endSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_has_overlaps(container, start, end));
    return rcpp_result_gen;
END_RCPP
}
// count_overlaps
int count_overlaps(SEXP container, int start, int end);
RcppExport SEXP _superintervals_count_overlaps(SEXP containerSEXP, SEXP startSEXP, SEXP endSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type container(containerSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< int >::type end(endSEXP);
    rcpp_result_gen = Rcpp::wrap(count_overlaps(container, start, end));
    return rcpp_result_gen;
END_RCPP
}
// cpp_search_values
List cpp_search_values(SEXP container, int start, int end);
RcppExport SEXP _superintervals_cpp_search_values(SEXP containerSEXP, SEXP startSEXP, SEXP endSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type container(containerSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< int >::type end(endSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_search_values(container, start, end));
    return rcpp_result_gen;
END_RCPP
}
// search_indexes
IntegerVector search_indexes(SEXP container, int start, int end);
RcppExport SEXP _superintervals_search_indexes(SEXP containerSEXP, SEXP startSEXP, SEXP endSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type container(containerSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< int >::type end(endSEXP);
    rcpp_result_gen = Rcpp::wrap(search_indexes(container, start, end));
    return rcpp_result_gen;
END_RCPP
}
// cpp_search_keys
List cpp_search_keys(SEXP container, int start, int end);
RcppExport SEXP _superintervals_cpp_search_keys(SEXP containerSEXP, SEXP startSEXP, SEXP endSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type container(containerSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< int >::type end(endSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_search_keys(container, start, end));
    return rcpp_result_gen;
END_RCPP
}
// cpp_search_items
List cpp_search_items(SEXP container, int start, int end);
RcppExport SEXP _superintervals_cpp_search_items(SEXP containerSEXP, SEXP startSEXP, SEXP endSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type container(containerSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< int >::type end(endSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_search_items(container, start, end));
    return rcpp_result_gen;
END_RCPP
}
// get_coverage
List get_coverage(SEXP container, int start, int end);
RcppExport SEXP _superintervals_get_coverage(SEXP containerSEXP, SEXP startSEXP, SEXP endSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type container(containerSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< int >::type end(endSEXP);
    rcpp_result_gen = Rcpp::wrap(get_coverage(container, start, end));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_superintervals_create_intervalmap", (DL_FUNC) &_superintervals_create_intervalmap, 0},
    {"_superintervals_add_interval", (DL_FUNC) &_superintervals_add_interval, 4},
    {"_superintervals_build_index", (DL_FUNC) &_superintervals_build_index, 1},
    {"_superintervals_get_interval_at", (DL_FUNC) &_superintervals_get_interval_at, 2},
    {"_superintervals_get_start_at", (DL_FUNC) &_superintervals_get_start_at, 2},
    {"_superintervals_get_end_at", (DL_FUNC) &_superintervals_get_end_at, 2},
    {"_superintervals_get_data_at", (DL_FUNC) &_superintervals_get_data_at, 2},
    {"_superintervals_clear_intervals", (DL_FUNC) &_superintervals_clear_intervals, 1},
    {"_superintervals_reserve_intervals", (DL_FUNC) &_superintervals_reserve_intervals, 2},
    {"_superintervals_get_size", (DL_FUNC) &_superintervals_get_size, 1},
    {"_superintervals_cpp_has_overlaps", (DL_FUNC) &_superintervals_cpp_has_overlaps, 3},
    {"_superintervals_count_overlaps", (DL_FUNC) &_superintervals_count_overlaps, 3},
    {"_superintervals_cpp_search_values", (DL_FUNC) &_superintervals_cpp_search_values, 3},
    {"_superintervals_search_indexes", (DL_FUNC) &_superintervals_search_indexes, 3},
    {"_superintervals_cpp_search_keys", (DL_FUNC) &_superintervals_cpp_search_keys, 3},
    {"_superintervals_cpp_search_items", (DL_FUNC) &_superintervals_cpp_search_items, 3},
    {"_superintervals_get_coverage", (DL_FUNC) &_superintervals_get_coverage, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_superintervals(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
